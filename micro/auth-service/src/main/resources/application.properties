spring.application.name=auth-service

#debug-routing
logging.level.org.springframework.cloud.gateway.mvc=DEBUG
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG

# Spring datasource
spring.datasource.url=jdbc:postgresql://localhost:5433/mono-db
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate properties
spring.jpa.database=postgresql
spring.jpa.properties.hibernate.format_sql=true
# The SQL dialect makes hibernating generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Optional: Show generated SQL statements in the console
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.open-in-view=true

#JWT
jwt.secret=BKJ%;/tL{#5Sq0jhey<Dpwn6S/7G5#
jwt.expireMonth=2

# Server Configuration
server.port=8090

# Spring Cloud Gateway Configuration

spring.cloud.gateway.mvc.routes[0].id=client-service
spring.cloud.gateway.mvc.routes[0].uri=http://localhost:8091
spring.cloud.gateway.mvc.routes[0].predicates[0]=Path=/micro/client-service/**
spring.cloud.gateway.mvc.routes[0].filters[0]=AddRequestHeader=X-User-Id, #{request.getAttribute('X-User-Id')}
spring.cloud.gateway.mvc.routes[0].filters[1]=AddRequestHeader=X-User-Roles, #{request.getAttribute('X-User-Roles')}
spring.cloud.gateway.mvc.routes[0].filters[2]=RemoveRequestHeader=authorization


spring.cloud.gateway.mvc.routes[1].id=report-service
spring.cloud.gateway.mvc.routes[1].uri=http://localhost:8092
spring.cloud.gateway.mvc.routes[1].predicates[0]=Path=/micro/report-service/**
spring.cloud.gateway.mvc.routes[1].filters[0]=AddRequestHeader=X-User-Id, #{request.getAttribute('X-User-Id')}
spring.cloud.gateway.mvc.routes[1].filters[1]=AddRequestHeader=X-User-Roles, #{request.getAttribute('X-User-Roles')}

spring.cloud.gateway.mvc.routes[2].id=account-service
spring.cloud.gateway.mvc.routes[2].uri=http://localhost:8093
spring.cloud.gateway.mvc.routes[2].predicates[0]=Path=/micro/account-service/**
spring.cloud.gateway.mvc.routes[2].filters[0]=AddRequestHeader=X-User-Id, #{request.getAttribute('X-User-Id')}
spring.cloud.gateway.mvc.routes[2].filters[1]=AddRequestHeader=X-User-Roles, #{request.getAttribute('X-User-Roles')}

spring.cloud.gateway.mvc.routes[3].id=transaction-service
spring.cloud.gateway.mvc.routes[3].uri=http://localhost:8094
spring.cloud.gateway.mvc.routes[3].predicates[0]=Path=/micro/transaction-service/**
spring.cloud.gateway.mvc.routes[3].filters[0]=AddRequestHeader=X-User-Id, #{request.getAttribute('X-User-Id')}
spring.cloud.gateway.mvc.routes[3].filters[1]=AddRequestHeader=X-User-Roles, #{request.getAttribute('X-User-Roles')}

# Cors configuration
management.endpoints.web.cors.allowed-headers=Authorization, Content-Type, X-Requested-With
management.endpoints.web.cors.allowed-methods=GET, POST, PUT, DELETE, PATCH
management.endpoints.web.cors.exposed-headers=Authorization
management.endpoints.web.cors.allowed-origins=*

# Enable Actuator Endpoints
management.endpoints.web.exposure.include=health,metrics,prometheus
management.prometheus.metrics.export.enabled=true
management.endpoint.prometheus.access=unrestricted